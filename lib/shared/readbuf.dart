/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * Copyright (C) 2019      Iiro Kaihlaniemi
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 */
import 'dart:typed_data';
import 'shared.dart';
import 'package:dQuakeWeb/common/clientserver.dart' show Com_Error;
import 'package:dQuakeWeb/shared/common.dart';

class Readbuf {
	Int8List data;
	int readcount = 0;

  Readbuf(Int8List data) {
    this.data = data;
  }

  BeginReading() {
	  this.readcount = 0;
  }

  int ReadChar() {
    int c = -1;
    if (this.readcount + 1 <= data.lengthInBytes) {
      c = this.data[this.readcount];
    }
    this.readcount += 1;
    return c;
  }

  int ReadByte() {
    int c = -1;
    if (this.readcount + 1 <= data.lengthInBytes) {
      c = this.data[this.readcount] & 0xFF;
    }
    this.readcount += 1;
    return c;
  }

  int ReadShort() {
    int c = -1;
    if (this.readcount + 2 <= data.lengthInBytes) {
      c = this.data.buffer.asByteData().getInt16(this.readcount, Endian.little);
    }
    this.readcount += 2;
    return c;
  }

  int ReadLong() {
    int c = -1;
    if (this.readcount + 4 <= data.lengthInBytes) {
      c = this.data.buffer.asByteData().getInt32(this.readcount, Endian.little);
    }
    this.readcount += 4;
    return c;
  }

  String ReadString() {
    var str = StringBuffer();
    while (true) {
      final c = this.ReadChar();
      if (c == -1 || c == 0) {
        return str.toString();
      }
      str.writeCharCode(c);
    }
  }

  String ReadStringLine() {
    var str = StringBuffer();
    while (true) {
      final c = this.ReadChar();
      if (c == -1 || c == 0 || c == 10) {
        return str.toString();
      }
      str.writeCharCode(c);
    }
  }

  Uint8List ReadData(int length) {
    Uint8List d = Uint8List.fromList(this.data.sublist(this.readcount, this.readcount + length));
    this.readcount += length;
    return d;
  }

  double ReadCoord() => this.ReadShort() * 0.125;

  List<double> ReadPos() {
    return [
      this.ReadShort() * 0.125,
      this.ReadShort() * 0.125,
      this.ReadShort() * 0.125
    ];
  }

  List<double> ReadDir() {
  	int b = this.ReadByte() & 0xFF;
	  if (b >= bytedirs.length) {
		  Com_Error(ERR_DROP, "MSF_ReadDir: out of range");
	  }

	  return List.generate(3, (i) => bytedirs[b][i]);
}

  double ReadAngle() => this.ReadChar() * 1.40625;

  double ReadAngle16() => SHORT2ANGLE(this.ReadShort());

  ReadDeltaUsercmd(usercmd_t from, usercmd_t move) {
    move.copy(from);

    int bits = this.ReadByte();

    /* read current angles */
    if ((bits & CM_ANGLE1) != 0)
    {
      move.angles[0] = this.ReadShort();
    }

    if ((bits & CM_ANGLE2) != 0)
    {
      move.angles[1] = this.ReadShort();
    }

    if ((bits & CM_ANGLE3) != 0)
    {
      move.angles[2] = this.ReadShort();
    }

    /* read movement */
    if ((bits & CM_FORWARD) != 0)
    {
      move.forwardmove = this.ReadShort();
    }

    if ((bits & CM_SIDE) != 0)
    {
      move.sidemove = this.ReadShort();
    }

    if ((bits & CM_UP) != 0)
    {
      move.upmove = this.ReadShort();
    }

    /* read buttons */
    if ((bits & CM_BUTTONS) != 0)
    {
      move.buttons = this.ReadByte();
    }

    if ((bits & CM_IMPULSE) != 0)
    {
      move.impulse = this.ReadByte();
    }

    /* read time to run command */
    move.msec = this.ReadByte();

    /* read the light level */
    move.lightlevel = this.ReadByte();
  }

}


List<List<double>> bytedirs = [
	[-0.525731, 0.000000, 0.850651],
	[-0.442863, 0.238856, 0.864188],
	[-0.295242, 0.000000, 0.955423],
	[-0.309017, 0.500000, 0.809017],
	[-0.162460, 0.262866, 0.951056],
	[0.000000, 0.000000, 1.000000],
	[0.000000, 0.850651, 0.525731],
	[-0.147621, 0.716567, 0.681718],
	[0.147621, 0.716567, 0.681718],
	[0.000000, 0.525731, 0.850651],
	[0.309017, 0.500000, 0.809017],
	[0.525731, 0.000000, 0.850651],
	[0.295242, 0.000000, 0.955423],
	[0.442863, 0.238856, 0.864188],
	[0.162460, 0.262866, 0.951056],
	[-0.681718, 0.147621, 0.716567],
	[-0.809017, 0.309017, 0.500000],
	[-0.587785, 0.425325, 0.688191],
	[-0.850651, 0.525731, 0.000000],
	[-0.864188, 0.442863, 0.238856],
	[-0.716567, 0.681718, 0.147621],
	[-0.688191, 0.587785, 0.425325],
	[-0.500000, 0.809017, 0.309017],
	[-0.238856, 0.864188, 0.442863],
	[-0.425325, 0.688191, 0.587785],
	[-0.716567, 0.681718, -0.147621],
	[-0.500000, 0.809017, -0.309017],
	[-0.525731, 0.850651, 0.000000],
	[0.000000, 0.850651, -0.525731],
	[-0.238856, 0.864188, -0.442863],
	[0.000000, 0.955423, -0.295242],
	[-0.262866, 0.951056, -0.162460],
	[0.000000, 1.000000, 0.000000],
	[0.000000, 0.955423, 0.295242],
	[-0.262866, 0.951056, 0.162460],
	[0.238856, 0.864188, 0.442863],
	[0.262866, 0.951056, 0.162460],
	[0.500000, 0.809017, 0.309017],
	[0.238856, 0.864188, -0.442863],
	[0.262866, 0.951056, -0.162460],
	[0.500000, 0.809017, -0.309017],
	[0.850651, 0.525731, 0.000000],
	[0.716567, 0.681718, 0.147621],
	[0.716567, 0.681718, -0.147621],
	[0.525731, 0.850651, 0.000000],
	[0.425325, 0.688191, 0.587785],
	[0.864188, 0.442863, 0.238856],
	[0.688191, 0.587785, 0.425325],
	[0.809017, 0.309017, 0.500000],
	[0.681718, 0.147621, 0.716567],
	[0.587785, 0.425325, 0.688191],
	[0.955423, 0.295242, 0.000000],
	[1.000000, 0.000000, 0.000000],
	[0.951056, 0.162460, 0.262866],
	[0.850651, -0.525731, 0.000000],
	[0.955423, -0.295242, 0.000000],
	[0.864188, -0.442863, 0.238856],
	[0.951056, -0.162460, 0.262866],
	[0.809017, -0.309017, 0.500000],
	[0.681718, -0.147621, 0.716567],
	[0.850651, 0.000000, 0.525731],
	[0.864188, 0.442863, -0.238856],
	[0.809017, 0.309017, -0.500000],
	[0.951056, 0.162460, -0.262866],
	[0.525731, 0.000000, -0.850651],
	[0.681718, 0.147621, -0.716567],
	[0.681718, -0.147621, -0.716567],
	[0.850651, 0.000000, -0.525731],
	[0.809017, -0.309017, -0.500000],
	[0.864188, -0.442863, -0.238856],
	[0.951056, -0.162460, -0.262866],
	[0.147621, 0.716567, -0.681718],
	[0.309017, 0.500000, -0.809017],
	[0.425325, 0.688191, -0.587785],
	[0.442863, 0.238856, -0.864188],
	[0.587785, 0.425325, -0.688191],
	[0.688191, 0.587785, -0.425325],
	[-0.147621, 0.716567, -0.681718],
	[-0.309017, 0.500000, -0.809017],
	[0.000000, 0.525731, -0.850651],
	[-0.525731, 0.000000, -0.850651],
	[-0.442863, 0.238856, -0.864188],
	[-0.295242, 0.000000, -0.955423],
	[-0.162460, 0.262866, -0.951056],
	[0.000000, 0.000000, -1.000000],
	[0.295242, 0.000000, -0.955423],
	[0.162460, 0.262866, -0.951056],
	[-0.442863, -0.238856, -0.864188],
	[-0.309017, -0.500000, -0.809017],
	[-0.162460, -0.262866, -0.951056],
	[0.000000, -0.850651, -0.525731],
	[-0.147621, -0.716567, -0.681718],
	[0.147621, -0.716567, -0.681718],
	[0.000000, -0.525731, -0.850651],
	[0.309017, -0.500000, -0.809017],
	[0.442863, -0.238856, -0.864188],
	[0.162460, -0.262866, -0.951056],
	[0.238856, -0.864188, -0.442863],
	[0.500000, -0.809017, -0.309017],
	[0.425325, -0.688191, -0.587785],
	[0.716567, -0.681718, -0.147621],
	[0.688191, -0.587785, -0.425325],
	[0.587785, -0.425325, -0.688191],
	[0.000000, -0.955423, -0.295242],
	[0.000000, -1.000000, 0.000000],
	[0.262866, -0.951056, -0.162460],
	[0.000000, -0.850651, 0.525731],
	[0.000000, -0.955423, 0.295242],
	[0.238856, -0.864188, 0.442863],
	[0.262866, -0.951056, 0.162460],
	[0.500000, -0.809017, 0.309017],
	[0.716567, -0.681718, 0.147621],
	[0.525731, -0.850651, 0.000000],
	[-0.238856, -0.864188, -0.442863],
	[-0.500000, -0.809017, -0.309017],
	[-0.262866, -0.951056, -0.162460],
	[-0.850651, -0.525731, 0.000000],
	[-0.716567, -0.681718, -0.147621],
	[-0.716567, -0.681718, 0.147621],
	[-0.525731, -0.850651, 0.000000],
	[-0.500000, -0.809017, 0.309017],
	[-0.238856, -0.864188, 0.442863],
	[-0.262866, -0.951056, 0.162460],
	[-0.864188, -0.442863, 0.238856],
	[-0.809017, -0.309017, 0.500000],
	[-0.688191, -0.587785, 0.425325],
	[-0.681718, -0.147621, 0.716567],
	[-0.442863, -0.238856, 0.864188],
	[-0.587785, -0.425325, 0.688191],
	[-0.309017, -0.500000, 0.809017],
	[-0.147621, -0.716567, 0.681718],
	[-0.425325, -0.688191, 0.587785],
	[-0.162460, -0.262866, 0.951056],
	[0.442863, -0.238856, 0.864188],
	[0.162460, -0.262866, 0.951056],
	[0.309017, -0.500000, 0.809017],
	[0.147621, -0.716567, 0.681718],
	[0.000000, -0.525731, 0.850651],
	[0.425325, -0.688191, 0.587785],
	[0.587785, -0.425325, 0.688191],
	[0.688191, -0.587785, 0.425325],
	[-0.955423, 0.295242, 0.000000],
	[-0.951056, 0.162460, 0.262866],
	[-1.000000, 0.000000, 0.000000],
	[-0.850651, 0.000000, 0.525731],
	[-0.955423, -0.295242, 0.000000],
	[-0.951056, -0.162460, 0.262866],
	[-0.864188, 0.442863, -0.238856],
	[-0.951056, 0.162460, -0.262866],
	[-0.809017, 0.309017, -0.500000],
	[-0.864188, -0.442863, -0.238856],
	[-0.951056, -0.162460, -0.262866],
	[-0.809017, -0.309017, -0.500000],
	[-0.681718, 0.147621, -0.716567],
	[-0.681718, -0.147621, -0.716567],
	[-0.850651, 0.000000, -0.525731],
	[-0.688191, 0.587785, -0.425325],
	[-0.587785, 0.425325, -0.688191],
	[-0.425325, 0.688191, -0.587785],
	[-0.425325, -0.688191, -0.587785],
	[-0.587785, -0.425325, -0.688191],
	[-0.688191, -0.587785, -0.425325]
];